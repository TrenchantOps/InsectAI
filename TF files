import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Set the dimensions of input images and batch size
img_height = 224
img_width = 224
batch_size = 32

# Data augmentation and normalization
train_datagen = ImageDataGenerator(
    rescale=1.0 / 255,
    rotation_range=20,
    zoom_range=0.2,
    horizontal_flip=True,
)

validation_datagen = ImageDataGenerator(rescale=1.0 / 255)

# Load and preprocess the dataset
train_dataset = train_datagen.flow_from_directory(
    r"C:\Users\scioz\bugbite-tf-master",
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode="categorical",
)

validation_dataset = validation_datagen.flow_from_directory(
    r"C:\Users\scioz\bugbite-tf-master",
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode="categorical",
)

# Transfer learning with pre-trained model
base_model = keras.applications.ResNet50(
    include_top=False, input_shape=(img_height, img_width, 3)
)

for layer in base_model.layers:
    layer.trainable = False

model = keras.Sequential([
    base_model,
    keras.layers.GlobalAveragePooling2D(),
    keras.layers.Dense(128, activation="relu"),
    keras.layers.Dense(4, activation="softmax")
])

# Model compilation
model.compile(
    optimizer=keras.optimizers.Adam(),
    loss=keras.losses.CategoricalCrossentropy(from_logits=False),
    metrics=["accuracy"]
)

# Model training
epochs = 20
model.fit(
    train_dataset,
    validation_data=validation_dataset,
    epochs=epochs,
)

# Save the trained model
model.save("insect_classification_model.h5")

